STREAM
生成流
        1.Collection体系默认方法.stream()
            Map体系间接得到
        2.数组通过Stream接口的静态方法 of (T ... Value)
中间操作
        Stream<T> filter(Predicate<? super T> predicate);
        Stream<T> skip(long n); 在丢弃流的第一个 n元素后，返回由此流的其余元素组成的流
        Stream<T> limit(long maxSize); 。返回由此流的元素组成的流，截断长度不超过 maxSize 。
        public static IntStream concat(IntStream a, IntStream b) 创建一个延迟连接的流，其元素是第一个流的所有元素，后跟第二个流的所有元素。
        Stream<T> distinct();去重 返回由此流的不同元素（根据 Object.equals(Object) ）组成的流。
        Stream<T> sorted(); 返回由此流的元素组成的流，按照自然顺序排序 或者Stream<T> sorted(Comparator<? super T> comparator)
        <R> Stream<R> map(Function<? super T, ? extends R> mapper);  返回 DoubleStream其中包含将给定函数应用于此流的元素的结果。
        IntStream mapToInt(ToIntFunction<? super T> mapper);返回 IntStream其中包含将给定函数应用于此流的元素的结果。
        void forEach(Consumer<? super T> action);
终结操作
  void forEach(Consumer<? super T> action); 对此流的每个元素执行操作。
  long count(); 返回此流中元素的数量。
收集